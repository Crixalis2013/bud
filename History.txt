== 0.9.5 / ???

* Lattice branch (Bloom^L) merged
* Implement support for aggregate functions that take multiple input columns
* Add built-in aggregate function accum_pair(x, y), which produces a Set of
  pairs (two-element arrays [x,y]).
* Support passing a code block to BudChannel#payloads. Previously a code block
  was allowed syntactically but wasn't evaluated
* Change behavior of BudChannel#payloads for channels with two
  columns. Previously we returned a single *column* (scalar) value in this case;
  now we always return a tuple with k-1 columns
* More consistent behavior for BudCollection#sort when used outside Bloom
  programs
* Restore support for each_with_index() over Bud collections
* Restore functionality of Zookeeper-backed Bud collections and fix
  incompatibility with recent (> 0.4.4) versions of the Zookeeper gem
* Support user-specified code blocks in argagg(), argmin() and argmax()
* Fix bug in argagg state materialization
* Fix bug in chaining argmin() or argmax() expressions
* Fix bug in chaining notin() expressions

== 0.9.4 / 2012-09-06

* Optimize grouping performance
* Fix regression in dbm-backed collections with MRI 1.8
* Fix regression in grouping operator with MRI 1.8 (#280)
* Fix bug in programs that applied non-monotonic operators to scratch
  collections under certain circumstances (#281)
* Fix bug in "notin" with multiple qualifiers (#282)

== 0.9.3 / 2012-08-20

* Change behavior of accum() aggregate to return a Set, rather than an Array in
  an unspecified order
* Fix several serious bugs in caching/invalidation of materialized operator
  state (#276, #278, #279)
* Avoid possible spurious infinite loop with dbm-backed collections
* Optimize aggregation/grouping performance
* Fix bugs and improve performance for materialization of sort operator
* Fix REBL regression with push-based runtime (#274)
* Minor performance optimizations for simple projection rules
* Remove dependency on gchart
* Built-in support for code coverage with MRI 1.9 and SimpleCov

== 0.9.2 / 2012-05-19

* Add new aggregate functions: bool_and() and bool_or()
* Fix bugs in notin() stratification and implementation (#271)
* Fix a bug in processing multi-way joins defined inside modules
* Fix two bugs in reduce() operator
  * Incorrect default value was sometimes returned
  * Didn't handle reduce() outputs that aren't tuples with two fields
* Improve reduce() operator error reporting
* Improve MRI 1.9 compatibility

== 0.9.1 / 2012-04-10

* Reject attempts to insert a tuple into a collection with more fields than are
  in the collection's schema
  * Previous behavior was to ignore additional fields, but this was found to be
    error-prone
* Remove builtin support for BUST (web services API); this avoids the need to
  depend on the json, nestful and i18n gems

== 0.9.0 / 2012-03-21

* Major performance enhancements
  * Much, much faster: rewritten runtime that now uses a push-based dataflow
  * Operator state is cached; only deltas are updated across ticks in many cases
  * Joins that use collection keys can use collection storage for improved
    performance
* Improved compatibility: Bud now works with MRI 1.9 (as well as 1.8.7)
  * Switched from ParseTree to ruby_parser
  * Rewritten Bloom module system
* Tuples are now represented as Ruby Structs, rather than Arrays
  * This avoids the need to define column accessor methods by hand
* Tests now use MiniTest rather than Test::Unit
* Observe the following incompatibilities:
  * Support for "semi-structured" collections have been removed. That is,
    previously you could store extra field values into a tuple; those values
    would be collapsed into a single array that was tacked onto the end of the
    tuple.
  * Support for Bloom-based signal handling has been removed
  * Support for the "with" syntax has been removed
  * The Bloom-based "deployment" framework has been removed
  * Support for Tokyo Cabinet-backed collections has been removed
