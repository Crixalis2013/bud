#!/usr/bin/env ruby
require 'rubygems'
require 'bud'
require 'bud/bud_meta'
require 'bud/depanalysis'
require 'bud/graphs'
require 'bud/viz_util'

include VizUtil

def is_constant?(m)
  begin
    return (eval("defined?(#{m})") == "constant")
  rescue SyntaxError
    return false
  end
end

def make_instance(mods)
  # If we're given a single identifier that names a class, just return an
  # instance of that class. Otherwise, define a bogus class that includes all
  # the module names specified by the user and return an instance.
  mods.each do |m|
    unless is_constant? m
      puts "Error: unable to find definition for module or class \"#{m}\""
      exit
    end

    mod_klass = eval m
    puts "m = #{m}; class = #{mod_klass.class}; length = #{mods.length}"
    if mod_klass.class == Class
      if mods.length == 1
        return mod_klass.new
      else
        puts "Error: cannot intermix classes and modules"
        exit
      end
    elsif mod_klass.class != Module
      puts "Error: \"#{m}\" is not a module or class name"
      exit
    end
  end

  def_lines = ["class FooBar",
               "include Bud",
               mods.map {|m| "include #{m}"},
               "end"
              ]
  class_def = def_lines.flatten.join("\n")
  eval(class_def)
  FooBar.new
end

def process(mods)
  d = make_instance(mods)

  interfaces = {}
  d.t_provides.each do |name, is_input|
    interfaces[name] = is_input
  end

  tabinf = {}
  inp = []
  outp = []
  priv = []
  d.tables.each do |t|
    tab = t[0].to_s
    tabinf[tab] = t[1].class.to_s
    if interfaces[tab].nil?
      unless tab =~ /^t_/ or tab == "stdio" or tab == "localtick"
        priv << t
      end
    else
      if interfaces[tab]
        inp << t
      else
        outp << t
      end
    end
  end

  viz_name = "bud_doc/" + mods.join("_") + "_viz"
  write_index(inp, outp, priv, viz_name)
  graph_from_instance(d, "#{viz_name}_collapsed", "bud_doc", true)
  graph_from_instance(d, "#{viz_name}_expanded", "bud_doc", false)
end

def write_index(inp, outp, priv, viz_name)
  f = File.open("bud_doc/index.html", "w")
  f.puts "<html>"
  f.puts "<embed src=\"#{ENV['PWD']}/#{viz_name}_collapsed.svg\" width=\"100%\" height=\"60%\" type=\"image/svg+xml\" pluginspage=\"http://www.adobe.com/svg/viewer/install/\" />"

  f.puts "<table border='1' valign='top' width = '100%'><tr valign='top'>"
  f.puts "<td valign='top'>"
  f.puts "<h2>Input Interfaces</h2>"
  do_table(f, inp)
  f.puts "</td><td>"
  f.puts "<h2>Output Interfaces</h2>"
  do_table(f, outp)
  f.puts "</td><td>"
  f.puts "<h2>Private State</h2>"
  do_table(f, priv)
  f.puts "</td>"
  f.puts "</tr></table>"
  f.puts "</html>"
  f.close
end

def do_table(f, info)
  f.puts "<table border='1'>"
  info.sort{|a, b| a[0].to_s <=> b[0].to_s}.each do |tbl_name, tbl_impl|
    next if tbl_impl.schema.nil?
    key_s = tbl_impl.key_cols.join(", ")
    key_s = "[]" if key_s == ""
    val_s = tbl_impl.val_cols.join(", ")
    f.puts "<tr><td><b>#{tbl_name}</b></td>"
    f.puts "<td>#{key_s}</td><td>#{val_s}</td></tr>"
  end
  f.puts "</table>"
end

if ARGV.length < 2
  puts "Usage: budplot LIST_OF_FILES LIST_OF_MODULES_OR_CLASSES"
  exit
end

`mkdir bud_doc`

modules = []
ARGV.each do |arg|
  if File.exists? arg
    require arg
  else
    modules << arg
  end
end

process(modules)
