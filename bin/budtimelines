#!/usr/bin/env ruby
require 'rubygems'
require 'dbm'
require 'bud'
require 'bud/graphs'
require 'bud/viz_util'

include VizUtil

class TraceProcessor
  include Bud
  state do
    
  end

  
end

def usage
  puts "USAGE:"
  exit
end

usage unless ARGV[0]
usage if ARGV[0] == '--help'

snd_info = {}
rcv_info = {}
clean_arg = []

ARGV.each do |arg_raw|
  elems = arg_raw.split("_")
  arg = "#{elems[2]}#{elems[3]}"
  clean_arg << arg
  snd_info[arg] = []
  rcv_info[arg] = []

  tables = slurp_tables("#{arg_raw}/bud_")
  meta = get_meta(tables)

  # a very conservative way to check if a timestep transition
  # was NM is to check if the cardinality of any predicates
  # appearing in the heads of NM rules changed...  
  nm_heads = meta[:depends].map do |m|
    puts "EM: #{m.inspect}"
    if m[4] 
      m[1]
    end
  end
  nm_heads.uniq!

  puts "nm heads is #{nm_heads.inspect}"

  data = dump_tbl_data(tables)
  data.each do |d|
    
    if meta[:tabinf].map{|m| m[0] if m[1] == "Bud::BudChannel"}.include? d[1]
      if d[1] =~ /_snd\z/
        snd_info[arg] << d 
      else
        rcv_info[arg] << d
      end
    elsif meta[:tabinf].map{|m| m[0] if m[1] == "Bud::BudPeriodic"}.include? d[1]
    end
  end
end

plot_data = []
snd_info.each_pair do |k1, v1|
  rcv_info.each_pair do |k2, v2|
    unless k1 == k2
      v1.each do |lval|
        v2.each do |rval|
          # erm, tuple equivalence?
          l = lval[2].clone
          r = rval[2].clone
          l.shift
          r.shift
          if l.inspect == r.inspect
            plot_data << [l.inspect, k1, k2, lval[0], rval[0], rval[1]]
          end
        end
      end
    end
  end
end

st = SpaceTime.new(plot_data)
st.process
st.finish("spacetime_trace_#{clean_arg.join('-')}")

