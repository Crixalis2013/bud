#!/usr/bin/env ruby
require 'rubygems'
require 'dbm'
require 'bud'
require 'bud/graphs'
require 'bud/viz_util'

include VizUtil

BUD_DBM_DIR = "#{ARGV[0]}/bud_"

class VizHelper
  include Bud

  state do
    table :full_info, [:bud_time, :table, :row]
    scratch :cardinalities, [:bud_time, :table] => [:cnt]
    scratch :times, [:bud_time]
  end

  def initialize(tabinf, cycle, depends, rules, dir)
    @t_tabinf = tabinf
    @t_cycle = cycle
    @t_depends = depends
    @t_rules = rules
    @dir = dir
    super()
  end

  bloom :counting do
    cardinalities <= full_info.group([full_info.bud_time, full_info.table], count)
    times <= full_info {|f| [f.bud_time]}
  end

  def summarize(dir, schema)
    table_io = {}
    cardinalities.sort{|a, b| a[0] <=> b[0]}.each do |card|
      table_io["#{card.table}_#{card.bud_time}"] = start_table(dir, card.table, card.bud_time, schema[card.table])
    end

    full_info.each do |info|
      write_table_content(table_io["#{info.table}_#{info.bud_time}"], info.row)
    end

    table_io.each_value do |tab|
      end_table(tab)
    end

    # fix: nested loops
    times.sort.each do |time|
      card_info = {}
      cardinalities.each do |card|
        if card.bud_time == time.bud_time
          card_info[card.table] = card.cnt
        end
      end

      d = "#{@dir}/tm_#{time.bud_time}"
      write_graphs(@t_tabinf, @t_cycle, @t_depends, @t_rules, d, @dir, nil, false, nil, time.bud_time, card_info)
    end
  end

  def start_table(dir, tab, time, schema)
    str = "#{dir}/#{tab}_#{time}.html"
    fout = File.new(str, "w")

    fout.puts "<html><title>#{tab} @ #{time}</title>"
    fout.puts "<table border=1>"
    fout.puts "<tr>" + schema.map{|s| "<th> #{s} </th>"}.join(" ") + "<tr>"
    fout.close
    return str
  end

  def end_table(stream)
    fp = File.open(stream, "a")
    fp.puts "</table>"
    fp.close
  end

  def write_table_content(fn, row)
    stream = File.open(fn, "a")
    stream.puts "<tr>"
    stream.puts row.map{|c| "<td>#{c.to_s}</td>"}.join(" ")
    stream.puts "</tr>"
    stream.close
  end
end

def usage
  puts "Usage:"
  puts "Running a Bud program with option :trace => true will cause a DBM directory DBM_dir to be created (Class_ObjectId_Port)"
  puts "> budvis DBM_dir"
  puts "This will create a series of svg files in DBM_dir, the root of which will be named tm_0.svg.  Open in a browser.\n"
  puts "e.g."
  puts "> ruby test/tc_carts.rb"
  puts "> budvis DBM_BCS_2159661360_"
  puts "> open DBM_BCS_2159661360_/tm_0.svg"
  puts "\nWith the SVG file open in a browser, you may navigate forward and backward in time"
  puts "by clicking the T and S nodes, respectively."
  exit
end

usage unless ARGV[0]
usage if ARGV[0] == '--help'


tables = slurp_tables(BUD_DBM_DIR)
meta = get_meta(tables)
data = dump_tbl_data(tables)
vh = VizHelper.new(meta[:tabinf], meta[:cycle], meta[:depends], meta[:rules], ARGV[0])
data.each do |d|
  vh.full_info << d
end

vh.tick
vh.summarize(ARGV[0], meta[:schminf])
